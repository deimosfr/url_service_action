#!/usr/bin/env perl
#
# License GPLv2
# This script does an action on a Windows service if a pattern is found on a website
# Made by Pierre Mavro <pierre.mavro@enovance.com>/<pierre@mavro.fr>
#
#######################################################
#
# To compile it as a binary, use strawberry 1.16.3, then launch that command :
# pp -C -x url_service_action.pl -o url_service_action.exe --lib=C:\strawberry\perl\lib:C:\strawberry\perl\site\lib:C:\strawberry\perl\vendor\lib
#
# If you got errors :
# SYSTEM ERROR in executing url_service_action.pl: 256 at C:/strawberry/perl/site/lib/Module/ScanDeps.pm line 1302.
# then comment those lines in C:\strawberry\perl\site\lib\Module\ScanDeps.pm line 1302 :
#    #die $compile
#    #    ? "SYSTEM ERROR in compiling $file: $rc" 
#    #    : "SYSTEM ERROR in executing $file: $rc" 
#    #    unless $rc == 0

use strict;
use warnings;
use Getopt::Long;
use LWP::Simple;
# Avoid compiling errors
use Encode::Byte;

# Help print
sub help
{
    print "Usage : url_service_action -u <url> -p <pattern> -s <service> -a <action> [-h]\n";
    print "\t-u : set the URL you want to check\n";
    print "\t-p : set the required search pattern\n";
    print "\t-s : give the Windows service name to do the action\n";
    print "\t-a : which action do you want to perform (start, restart or stop)\n";
    exit(1);
}

# Check args content
sub check_args {
    my $url = shift;
    my $action = shift;

    # Check URL 
    if ($url !~ /http/) {
        print "Please specify a correct URL (ex. http://www.site.com)\n";
        exit(1);
    }
    # Check action type
    if ($action !~ /\b(start|restart|stop)\b/i) {
        print "Please specify an action like : start, restart or stop\n";
        exit(1);
    }
}

# Do the job
sub proseed {
    my $url = shift;
    my $pattern = shift;
    my $service = shift;
    my $action = shift;
    my @result;

    # Get URL content
    my $content = get($url);

    # If pattern not found -> exit
    if ($content !~ /$pattern/) {
        print "Pattern not found : $pattern\n";
        exit(1);
    # If pattern found do the action on the service
    } else {
        # Uppercase action
        $action =~ s/($action)/\U$1/;

        # Launch actions
        print "Requested $action for $service\n";
        if ($action =~ /\b(START|STOP)\b/) {
            @result = `NET $action "$service"`;
        } elsif ($action eq 'RESTART') {
            @result = `NET STOP "$service"`;
            @result = `NET START "$service"`;
        } else {
            print "Unknow request : $service $action\n";
            exit(1);
        }

        # Check result
        if ($result[1] =~ /(success|démarré)/) {
            print "$action $service successfull\n";
            exit(0);
        } else {
            print "$action $service failed\n";
            exit(1);
        }
    }
}

# Check cli args
sub check_opts
{
    # Vars
    my ($url,$pattern,$service,$action);
    
    # Set options
    GetOptions( "help|h"    => \&help,
                "u=s"       => \$url,
                "p=s"       => \$pattern,
                "s=s"       => \$service,
                "a=s"       => \$action);
                
    unless (($url) and ($pattern) and ($service) and ($action))
    {
        help;
    }
    else
    {
        check_args($url,$action);
        proseed($url,$pattern,$service,$action);
    }
}

check_opts;

